from aiogram import types
from main import dp, bot
from aiogram.dispatcher.filters.state import State
from keyboards.keyboards import start_kb
from main import db, wa
from models import Tenant

@dp.message_handler(commands=["start"], state="*")
async def start(message: types.Message):
    markup = await start_kb()

    await message.answer("""–≠—Ç–æ –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ —Å–µ–∫—Ä–µ—Ç–∞—Ä—è –æ–±—â–∏—Ö —Å–æ–±—Ä–∞–Ω–∏–π. –û–Ω –º–æ–∂–µ—Ç:
üöÄ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–æ–º–µ—â–µ–Ω–∏—è–º –∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞–º
ü§≥ –∑–∞–Ω–µ—Å—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∂–∏–ª—å—Ü–æ–≤ –∏ –∞–Ω–∫–µ—Ç—ã —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤
ü§ñ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ WhatsApp (–≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∫–æ–Ω—Å—å–µ—Ä–∂ –¥–æ–º–∞)
üí¨ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≥–æ—Å—Ç–µ–π –∏ –∂–∏–ª—å—Ü–æ–≤ —á–µ—Ä–µ–∑ –∫–æ–Ω—Å—å–µ—Ä–∂–∞ –¥–æ–º–∞
üì¢ –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ—Ö –∂–∏–ª—å—Ü–æ–≤ –æ–± –æ–±—â–∏—Ö —Å–æ–±—Ä–∞–Ω–∏—è—Ö –≤ –¥–æ–º–µ
‚úÖ –ø–æ–ª—É—á–∞—Ç—å –æ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤ –±—é–ª–ª–µ—Ç–µ–Ω–∏ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è""", reply_markup=markup)





@dp.callback_query_handler(lambda call: call.data == "add_from_form", state="*")
async def post_registry(callback: types.CallbackQuery, state=State):
    data = callback.message.text.split("\n")
    address = data[5].replace('–ê–¥—Ä–µ—Å: ','')
    cad_num = db.get_house_by_address(address)
    tenant = await _create_tenant_from_form(data,*cad_num)
    text = "–î–æ–±–∞–≤–ª—è—é"
    mes = await callback.message.answer(text)
    try:
        db.add_tenant(tenant.__dict__)
        await callback.message.answer(text)
        await state.finish()
    except Exception as ex:
        await callback.message.answer(ex)
    finally:
        await mes.delete()
        
async def _create_tenant_from_form(data,cad_num):
    date = data[0].replace('–ê–Ω–∫–µ—Ç–∞ –æ—Ç –Ω–æ–º–µ—Ä–∞  (','')[:-1]
    name = data[1].replace('–ò–ú–Ø: ','')
    phone = data[2].replace('–¢–µ–ª–µ—Ñ–æ–Ω: ','')[1:].replace(" ",'')
    email = data[3].replace('email: ','').strip()

    address = data[5].replace('–ê–¥—Ä–µ—Å: ','')
    flat_num = data[6].replace('–ù–æ–º–µ—Ä –∫–≤: ','').strip()
    status = data[7].replace('–°—Ç–∞—Ç—É—Å: ','').strip()
    has_watsapp = '–î–∞' if await wa.is_wa_exist(phone[1:]) else '–ù–µ—Ç'
    flat =  db.get_flat_by_num(flat_num,cad_num)
    tenant = Tenant(
    date_of_create = date,
    flat_num = flat_num,
    flat_id = flat[5].replace(":",''),
    flat_status = flat[1],
    name = name,
    phone = phone,
    has_watsapp = has_watsapp,
    status = status,
    owner_full_name = "",
    owner_email = email,
    last_email_date = "",
    last_oss_number = "",
    date_of_sopd = "",
    passport = "",
    mkd_id = cad_num.replace(":",'') ,
    fraction_part = "",
    address = address,
    owner = "",
    cad_num = cad_num
    )
    return tenant